#!/usr/bin/env perl

use 5.010;
use utf8;
use strict;
use warnings;
use autodie;
use Pod::Usage;
use Getopt::Long qw(:config auto_version auto_help);
use File::Spec::Functions;
use URI;
use URI::Escape;
use lib '/home/gustavo/git/mine/gerrit-rest/lib';
use Gerrit::REST;

# The %Options hash is used to hold the command line options passed to
# all git-gerrit subcommands. The --verbose option is common to all of
# them. Each subcommand supports a specific set of options which are
# grokked by the get_options routine below.

my %Options = ( verbose => 0, debug => 0 );
sub get_options {
    my ($optref, @opt_specs) = @_;
    return GetOptions(\%Options, 'verbose+', 'debug', @opt_specs)
        or pod2usage(2);
}

# The cmd routine is used to invoke shell commands, usually git. It
# prints out the command before invoking it in verbose operation.

sub cmd {
    my ($cmd) = @_;
    warn "CMD: $cmd\n" if $Options{debug};
    return system($cmd) == 0;
}

# The %Config hash holds the git-gerrit section configuration options.

my %Config;
sub grok_config {
    warn "CMD: git config --get-regexp \"^git-gerrit\\.\"\n"
        if $Options{debug};
    {
        open my $pipe, '-|', 'git config --get-regexp "^git-gerrit\."';
        while (<$pipe>) {
            if (/^git-gerrit\.(\S+)\s+(.*)/) {
                $Config{$1} = $2;
            } else {
                warn "Strange git-config output: $_";
            }
        }
    }

    # Override option defaults
    for my $opt (qw/verbose/) {
        $Options{$opt} = $Config{"default-$opt"}
            if exists $Config{"default-$opt"};
    }

    unless ($Config{baseurl} && $Config{username} && $Config{project}) {
        warn <<EOF;

*** Please configure git-gerrit:

EOF

        warn <<EOF unless $Config{baseurl};
Run

    git config --global git-gerrit.baseurl "https://your.gerrit.domain"

to set your Gerrit server base URL. Omit --global if you only want to
configure it for this particular repository.

EOF

        warn <<EOF unless $Config{username};
Run

    git config --global git-gerrit.username "username"

to set the username you use to authenticate with Gerrit. Omit --global
if you only want to configure it for this particular repository.

EOF

        warn <<EOF unless $Config{project};
Run

    git config git-gerrit.project "gerrit/project/name"

to set the Gerrit project your repository is associated with.

EOF

        die;
    }

    $Config{baseurl} =~ s:/+$::; # trim trailing slashes from the baseurl

    $Config{url}     = URI->new($Config{baseurl} . '/' . $Config{project});

    $Config{baseurl} = URI->new($Config{baseurl});

    chomp($Config{gitdir}  = qx/git rev-parse --git-dir/);

    return;
}

sub install_commit_msg_hook {
    # Do nothing if it already exists
    my $commit_msg = catfile($Config{gitdir}, 'hooks', 'commit-msg');
    return if -e $commit_msg;

    # Otherwise, check if we need to mkdir the hooks directory
    my $hooks_dir = catdir($Config{gitdir}, 'hooks');
    mkdir $hooks_dir unless -e $hooks_dir;

    # Try to download and install the hook.
    eval { require LWP::Simple };
    if ($@) {
        warn "LWP: cannot install commit_msg hook because couldn't require LWP::Simple\n"
            if $Options{debug};
    } else {
        warn "LWP: install commit_msg hook\n" if $Options{debug};
        if (LWP::Simple::is_success(LWP::Simple::getstore("$Config{baseurl}/tools/hooks/commit-msg", $commit_msg))) {
            chmod 0755, $commit_msg;
        }
    }
}

sub credential_description {
    my $baseurl = $Config{baseurl};

    my $protocol = $baseurl->scheme;
    my $host     = $baseurl->host;
    my $path     = $baseurl->path;

    return <<EOF;
protocol=$protocol
host=$host
path=$path
username=$Config{username}
EOF
}

sub get_credentials {
    # Create a temporary file to hold the credential description
    require File::Temp;
    my ($fh, $credfile) = File::Temp::tempfile(UNLINK => 1);
    $fh->print(credential_description(), "\n");
    $fh->print("\n");
    $fh->close;

    my %credentials;
    open my $pipe, '-|', "git credential fill <$credfile";
    while (<$pipe>) {
        chomp;
        $credentials{$1} = $2 if /^([^=]+)=(.*)/;
    }
    close $pipe;

    for my $key (qw/username password/) {
        exists $credentials{$key} or die "Couldn't get credential's $key\n";
    }

    return @credentials{qw/username password/};
}

sub set_credentials {
    my ($username, $password, $what) = @_;

    $what =~ /^(?:approve|reject)$/
        or die "set_credentials \$what argument ($what) must be either 'approve' or 'reject'\n";

    open my $git, '|-', "git credential $what";
    $git->print(credential_description(), "password=$password\n\n");
    $git->close;

    return;
}

sub gerrit {
    my $method = shift;

    state $gerrit;
    unless ($gerrit) {
        my ($username, $password) = get_credentials;
        $gerrit = Gerrit::REST->new($Config{baseurl}->as_string, $username, $password);
        eval { $gerrit->GET("/projects/" . uri_escape_utf8($Config{project})) };
        if ($@) {
            set_credentials($username, $password, 'reject');
            die $@;
        } else {
            set_credentials($username, $password, 'approve');
        }
    }

    warn join(' ', 'Gerrit:', $method, @_), "\n" if $Options{debug};

    return $gerrit->$method(@_);
}

sub query_changes {
    my @queries = @_;

    return [] unless @queries;

    # If we're inside a git repository, restrict the query to the
    # current project's reviews.
    if (my $project = $Config{project}) {
        $project = uri_escape_utf8($project);
        @queries = map "q=project:$project+$_", @queries;
    }

    push @queries, "n=$Options{limit}" if $Options{limit};

    push @queries, "o=DETAILED_ACCOUNTS";

    my $changes = gerrit(GET => "/changes/?" . join('&', @queries));
    $changes = [$changes] if ref $changes->[0] eq 'HASH';

    return $changes;
}

sub get_change {
    my ($id, $allrevs) = @_;

    my $revs = $allrevs ? 'ALL_REVISIONS' : 'CURRENT_REVISION';
    return (gerrit(GET => "/changes/?q=change:$id&o=$revs"))[0][0];
}

sub change_refspecs {
    my ($change) = @_;

    my %refspecs;
    foreach my $patch (sort {$a->{_number} <=> $b->{_number}} values %{$change->{revisions}}) {
        my $http = $patch->{fetch}{http};
        push @{$refspecs{$http->{url}}}, "$http->{ref}:review/$change->{_number}/$patch->{_number}";
    }
    return \%refspecs;
}

sub current_branch {
    chomp(my $branch = qx/git rev-parse --abbrev-ref HEAD/);
    return $branch;
}

sub update_branch {
    my ($branch) = @_;

    cmd "git fetch $Config{url} $branch:$branch";
}

sub change_branch_new {
    my ($uptream, $topic) = @_;
    die "The TOPIC cannot contain the slash character (/).\n"
        if $topic =~ m:/:;
    return "change/$upstream/$topic";
}

sub change_branch_lists {
    chomp(my @branches = map s/^\*?\s+//, qx/git branch --list 'change*'/);
    return @branches;
}

sub change_branch_info {
    my ($branch) = @_;
    if ($branch =~ m:^change/(?<upstream>.*)/(?<id>[^/]+):) {
        return ($+{upstream}, $+{id});
    }
    return;
}

sub current_change {
    return change_branch_info(current_branch);
}

sub current_change_id {
    my ($branch, $id) = current_change;

    return $id;
}

############################################################
# SUBCOMMANDS

my %commands;

$commands{new} = sub {
    get_options('update');

    my ($topic, $branch) = @ARGV;

    defined $topic or pod2usage "new: Missing TOPIC.\n";

    install_commit_msg_hook;

    $branch = current_branch();

    $branch !~ m:^change/: or pod2usage "new: Missing BRANCH.\n";

    qx/git status --porcelain --untracked-files=no/ eq ''
        or die "new: Can't create new change because git-status is dirty\n";

    if ($Options{update}) {
        update_branch($branch)
            or die "new: Non-fast-forward pull. Please, merge or rebase your branch first.\n";
    }

    cmd "git checkout -b change/$branch/$topic";
};

$commands{query} = sub {
    get_options('limit=i');

    my $changes = query_changes(@ARGV);

    # FIXME: consider using Text::Table for formatting
    my $format = "%-5s %-9s %-19s %-20s %-12s %-24s %s\n";
    for (my $i=0; $i < @$changes; ++$i) {
        print "\n[[$ARGV[$i]]]\n";
        next unless @{$changes->[$i]};
        printf $format, 'ID', 'STATUS', 'UPDATED', 'PROJECT', 'BRANCH', 'OWNER', 'SUBJECT';
        foreach my $change (sort {$b->{updated} cmp $a->{updated}} @{$changes->[$i]}) {
            if ($Options{verbose}) {
                if (my $topic = gerrit(GET => "/changes/$change->{id}/topic")) {
                    $change->{branch} .= " ($topic)";
                }
            }
            printf $format,
                $change->{_number},
                $change->{status},
                substr($change->{updated}, 0, 19),
                $change->{project},
                $change->{branch},
                substr($change->{owner}{name}, 0, 24),
                $change->{subject};
        }
    }
    print "\n";
};

$commands{list} = sub {
    push @ARGV, qw/is:open+owner:self is:open+reviewer:self+-owner:self/;
    $commands{query}();
};

$commands{show} = sub {
    get_options();

    my $id = shift @ARGV || current_change_id()
        or pod2usage "show: Missing CHANGE.\n";

    my $change = gerrit(GET => "/changes/$id/detail");

    print <<EOF;
 Change-Num: $change->{_number}
  Change-Id: $change->{change_id}
    Subject: $change->{subject}
      Owner: $change->{owner}{name}
EOF

    if ($Options{verbose}) {
        if (my $topic = gerrit(GET => "/changes/$id/topic")) {
            $change->{topic} = $topic;
        }
    }

    for my $key (qw/project branch topic created updated status reviewed mergeable/) {
        printf "%12s %s\n", "\u$key:", $change->{$key}
            if exists $change->{$key};
    }

    for my $label (sort keys %{$change->{permited_labels}}) {
        for my $review (sort {$a->{name} cmp $b->{name}} @{$change->{labels}{$label}{all}}) {
            printf "%12s %-32s %+2d\n", "$label:", @{$review}{qw/name value/};
        }
    }
};

$commands{checkout} = sub {
    get_options();

    my $id = shift @ARGV || current_change_id()
        or pod2usage "checkout: Missing CHANGE.\n";

    my $change = get_change($id);

    my ($revision) = values %{$change->{revisions}};

    my ($url, $ref) = @{$revision->{fetch}{http}}{qw/url ref/};

    my $branch = "change/$change->{branch}/$change->{_number}";

    cmd "git fetch $url $ref:$branch"
        or die "Can't fetch $url\n";

    cmd "git checkout $branch";
};

$commands{push} = sub {
    get_options(
        'keep',
        'rebase',
        'update',
        'topic=s',
        'reviewer=s@',
        'cc=s@'
    );

    install_commit_msg_hook;

    qx/git status --porcelain --untracked-files=no/ eq ''
        or die "push: Can't push change because git-status is dirty\n";

    my $change_branch = current_branch();

    my ($prefix, $branch, $topic, $id) = split m:/:, $change_branch;

    $prefix eq 'change' or die "push: You must be in a change branch to push it\n";

    if ($Options{update}) {
        update_branch($branch)
            or die "push: Non-fast-forward pull. Please, merge or rebase your branch first.\n";
    }

    if ($Options{rebase}) {
        cmd "git rebase $branch";
    }

    my $refspec = "HEAD:refs/for/$branch";

    my @tags;
    if (my $topic = $Options{topic}) {
        push @tags, "topic=$topic";
    }
    if (my $reviewers = $Options{reviewer}) {
        push @tags, map("r=$_", split(/,/, join(',', @$reviewers)));
    }
    if (my $ccs = $Options{cc}) {
        push @tags, map("cc=$_", split(/,/, join(',', @$ccs)));
    }
    if (@tags) {
        $refspec .= '%';
        $refspec .= join(',', @tags);
    }

    cmd "git push $Config{url} $refspec"
        or die "push: Error pushing change.\n";

    return if $Options{keep};

    cmd "git checkout $branch";

    cmd "git branch -D $change_branch";
};

$commands{reviewer} = sub {
    get_options(
        'add=s@',
        'confirm',
        'delete=s@',
    );

    my $id = shift @ARGV || current_change_id()
        or pod2usage "reviewer: Missing CHANGE.\n";

    # First try to make all deletions
    if (my $users = $Options{delete}) {
        foreach my $user (split(/,/, join(',', @$users))) {
            gerrit(DELETE => "/changes/$id/reviewers/$user");
        }
    }

    # Second try to make all additions
    if (my $users = $Options{add}) {
        my $confirm = $Options{confirm} ? 'true' : 'false';
        foreach my $user (split(/,/, join(',', @$users))) {
            gerrit(POST => "/changes/$id/reviewers/$user", { reviewer => $user, confirm => $confirm});
        }
    }

    # Finally, list current reviewers
    my @reviewers = gerrit(GET => "/changes/$id/reviewers");
    print "There are ", scalar(@reviewers), " reviewers currently:\n";
    foreach my $reviewer (@reviewers) {
        print "$reviewer->{name}\t$reviewer->{email}\t";
        foreach my $approval (sort keys $reviewer->{approvals}) {
            print "$approval:$reviewer->{approvals}{$approval}";
        } continue {
            print ", ";
        }
        print "\n";
    }
};

$commands{review} = sub {
    get_options('message=s');

    my $vote = shift @ARGV
        or pod2usage "review: Missing VOTE.\n";
    $vote =~ /^[+-]?[012]$/
        or pod2usage "review: Invalid vote ($vote). It must be from -2 to +2.\n";

    my $id = shift @ARGV || current_change_id()
        or pod2usage "review: Missing CHANGE.\n";

    my %review = ( labels => { 'Code-Review' => $vote } );
    $review{message} = $Options{message} if $Options{message};

    gerrit(POST => "/changes/$id/revisions/current/review", \%review);
};

$commands{abandon} = sub {
    get_options('message=s');

    my $id = shift @ARGV || current_change_id()
        or pod2usage "abandon: Missing CHANGE.\n";

    my @args = ("/changes/$id/abandon");
    push @args, { message => $Options{message} } if $Options{message};
    gerrit(POST => @args);
};

$commands{restore} = sub {
    get_options('message=s');

    my $id = shift @ARGV || current_change_id()
        or pod2usage "restore: Missing CHANGE.\n";

    my @args = ("/changes/$id/restore");
    push @args, { message => $Options{message} } if $Options{message};
    gerrit(POST => @args);
};

$commands{revert} = sub {
    get_options('message=s');

    my $id = shift @ARGV || current_change_id()
        or pod2usage "revert: Missing CHANGE.\n";

    my @args = ("/changes/$id/revert");
    push @args, { message => $Options{message} } if $Options{message};
    gerrit(POST => @args);
};

$commands{submit} = sub {
    get_options('wait-for-merge');

    my $id = shift @ARGV || current_change_id()
        or pod2usage "submit: Missing CHANGE.\n";

    my @args = ("/changes/$id/submit");
    push @args, { wait_for_merge => 1 } if $Options{'wait-for-merge'};
    gerrit(POST => @args);
};

# MAIN

my $command = shift
    or die pod2usage "Missing command name.\n";

exists $commands{$command}
    or die pod2usage "Invalid command: $command.\n";

grok_config;

$commands{$command}->();

__END__
=head1 NAME

git-gerrit - Git extension to implement a Gerrit workflow

=head1 SYNOPSIS

    git gerrit new        [--update] TOPIC [BRANCH]
    git gerrit query      [--limit LIMIT] [--verbose] QUERY*
    git gerrit list       [--limit LIMIT] [--verbose]
    git gerrit show       [CHANGE]
    git gerrit checkout   [CHANGE]
    git gerrit push       [--keep] [--rebase] [--update] [--reviewer USER] [--cc USER]
    git gerrit reviewer   [--add USER|GROUP] [--confirm] [--delete USER|GROUP] [CHANGE]
    git gerrit review     [--message TEXT] {-2..+2} [CHANGE]
    git gerrit abandon    [--message TEXT] [CHANGE]
    git gerrit restore    [--message TEXT] [CHANGE]
    git gerrit revert     [--message TEXT] [CHANGE]
    git gerrit submit     [--wait-for-merge] [CHANGE]

    git gerrit log
    git gerrit cherrypick [--no-commit] [--indicate] CHANGE
    git gerrit diff       CHANGE-RANGE

=head1 OPTIONS

=over

=item

=back

=head1 DESCRIPTION

=head1 SEE ALSO

=over

=item * L<git-review|https://github.com/openstack-infra/git-review>:
Another script implementing a Gerrit workflow in Git.

=back

=head1 PREREQUISITES

=over
=item * C<Pod::Usage>
=item * C<Getopt::Long>
=item * C<File::Temp>
=item * C<Gerrit::REST>
=item * C<URI>
=item * C<URI::Escape>
=back

=head1 COREQUISITES

=over
=item * C<Term::Prompt>
=back

=pod OSNAMES

any

=pod SCRIPT CATEGORIES

VersionControl/Git
VersionControl/Gerrit

=head1 COPYRIGHT

Copyright 2013 CPqD.

This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=head1 AUTHOR

Gustavo Chaves <gnustavo@cpan.org>
